@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <div class="row">
        <div class="col-xs-3 text-right">hub: </div>
        <div class="col-xs-9"><span data-bind="text: currentState().HubId"></span></div>

        <div class="col-xs-3 text-right">session: </div>
        <div class="col-xs-9"><span data-bind="text: currentState().SessionId"></span></div>
        <div class="col-xs-3 text-right">user: </div>
        <div class="col-xs-9">
            <a data-bind="if: userName().length == 0,attr: { href: currentState().HubId },click: getUserInput">Log In</a>   
            <span data-bind="text: userName"></span>
        </div>
    </div>

                                                                      
</div>

<div class="row">
    <div class="col-md-4">
        <ul data-bind="foreach: allHubs">
            <li>
                <span data-bind="text: UserName"></span>
                <a class="btn" data-bind="if: UserName != 'N/A' && UserName != $parent.userName() && $parent.userName().length > 0, click: $parent.sendMsssage">send message</a>
            </li>
        </ul>
    </div>
    <div class="col-md-4">
        <ul data-bind="foreach: received().reverse()">
            <li>
                <strong >
                    <span data-bind="text: Sender"></span> ->  <span data-bind="text: Recipients[0]"></span> :  
                </strong>                              
                <span data-bind="text: Body"></span>
            </li>
        </ul>
    </div>
    <div class="col-md-4">

    </div>
</div>
@section scripts
{
    <script src="~/Scripts/knockout-3.2.0.debug.js"></script>
    <script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript">


        $(function () {
            var model;
            var assistHubProxy = $.connection.assistHub;
            assistHubProxy.client.hello = function () {
                console.log("Hello from server");
            };
            assistHubProxy.client.updateAlive = function () {
                assistHubProxy.server.alive().done(function (conns) {
                    model.allHubs(conns);
                });
            };
            assistHubProxy.client.handleMessage  = function (message) {
                model.received.push(message);
               
            };
            ViewModel = function (current, alive) {
                var self = this;

                self.currentState = ko.observable(current);
                self.stateHistory = ko.observableArray();
                self.allHubs = ko.observableArray(alive);
                self.received = ko.observableArray();

                self.userName = ko.computed(function () {
                    var name = "";
                    if (self.currentState().SessionUser) {
                        name = self.currentState().SessionUser.UserName;
                    }
                    return name;
                }, self);

                self.getUserInput = function() {
                    var name = prompt("Set User Name");
                    if (name.length > 0) {
                        assistHubProxy.server.setUser(name).done(function (conn) {
                            self.currentState(conn);
                            assistHubProxy.server.updateAlive();
                        });
                    }
                }

                self.sendMsssage = function (data) {
                    var message = prompt("Send message to user: " + data.UserName);
                    if (message.length > 0) {
                       
                        assistHubProxy.server.groupMessage(data.UserName, message);
                    }
                }
            }


            function init() {

                var _current;
                var _alive;
                assistHubProxy.server.current().done(function (conn) {
                    _current = conn;
                    assistHubProxy.server.alive().done(function (conns) {
                        _alive = conns;
                        model = new ViewModel(_current, _alive);
                       
                        ko.applyBindings(model);
                    });
                });



            }


            $.connection.hub.start().done(init);
        });
    </script>
    <script type="text/html" id="alive-template">
    </script>
}
